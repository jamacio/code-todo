{"version":3,"file":"extension.js","mappings":"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","sources":["../external commonjs \"vscode\"",".././src/extension.js","../external node-commonjs \"readline\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["module.exports = require(\"vscode\");","// © 2025 Jamácio Rocha - Licensed under Non-Commercial OSS\nconst vscode = require('vscode');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst { createReadStream } = require('fs');\nconst readline = require('readline');\n\nconst TAGS = ['BUG', 'HACK', 'FIXME', 'TODO', 'XXX'];\nconst TAG_PATTERN = `\\\\b(${TAGS.join('|')})(?=\\\\s|:)[:]?\\\\s*(.*)`;\nconst CACHE_VERSION = 42;\n\nclass TodoTreeProvider {\n  constructor(context) {\n    this.context = context;\n    this.cache = new Map();\n    this.fileMap = new Map();\n    this.decorations = new Map();\n    this.isScanning = false;\n    this.documentChangeTimer = null;\n    this.updateTimers = new Map();\n\n    this._onDidChangeTreeData = new vscode.EventEmitter();\n    this.onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n    this.decorationType = vscode.window.createTextEditorDecorationType({\n      backgroundColor: 'rgba(255, 255, 255, 0.68)',\n      color: 'rgba(0, 0, 0, 0.68)',\n      border: '1px solid rgba(255, 255, 255, 0.68)',\n      borderRadius: '3px',\n      overviewRulerColor: 'yellow',\n      overviewRulerLane: vscode.OverviewRulerLane.Right,\n    });\n\n    this.initialize();\n  }\n\n  async initialize() {\n    this.loadCacheSync();\n\n    if (this.fileMap.size > 0) {\n      this.refresh();\n      this.applyHighlightsToActiveEditor();\n    }\n\n    this.setupWatchers();\n    setTimeout(() => this.startScan(), 100);\n  }\n\n  loadCacheSync() {\n    try {\n      const cacheData = this.context.globalState.get(`todoCache_v${CACHE_VERSION}`) || {};\n\n      Object.entries(cacheData).forEach(([filePath, entry]) => {\n        if (entry?.items && Array.isArray(entry.items) && entry.items.length > 0) {\n          this.cache.set(filePath, entry);\n          this.fileMap.set(filePath, entry.items);\n        }\n      });\n    } catch (error) {\n      console.error('Cache load failed:', error);\n    }\n  }\n\n  async startScan() {\n    if (this.isScanning) return;\n    this.isScanning = true;\n\n    try {\n      const uris = await vscode.workspace.findFiles(\n        '**/*.{js,ts,jsx,tsx,vue,php,py,java,cs,cpp,h,hpp,html,css,scss,md,txt,yaml,yml,json}',\n        '**/{node_modules,vendor,dist,out,build,.git,.vscode,coverage,tmp,temp,__pycache__}/**'\n      );\n\n      const filesToProcess = [];\n      for (const uri of uris) {\n        const filePath = uri.fsPath;\n        try {\n          const stats = await fs.stat(filePath);\n          const cacheEntry = this.cache.get(filePath);\n\n          if (!cacheEntry ||\n            cacheEntry.mtime !== stats.mtimeMs ||\n            cacheEntry.size !== stats.size) {\n            filesToProcess.push(filePath);\n          }\n        } catch (error) {\n          this.handleFileDelete(filePath);\n        }\n      }\n\n      await this.processFilesInBatches(filesToProcess);\n      await this.saveCache();\n\n    } catch (error) {\n      console.error('Scan failed:', error);\n    } finally {\n      this.isScanning = false;\n    }\n  }\n\n  async processFilesInBatches(files) {\n    const BATCH_SIZE = 10;\n    let processed = 0;\n\n    for (let i = 0; i < files.length; i += BATCH_SIZE) {\n      const batch = files.slice(i, i + BATCH_SIZE);\n\n      await Promise.all(batch.map(async (filePath) => {\n        try {\n          await this.processFile(filePath);\n          processed++;\n\n          if (processed % 20 === 0) {\n            this.refresh();\n          }\n        } catch (error) {\n          console.error(`Error processing ${filePath}:`, error);\n        }\n      }));\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n\n    this.refresh();\n  }\n\n  async processFile(filePath) {\n    try {\n      const stats = await fs.stat(filePath);\n\n      if (stats.size > 2 * 1024 * 1024) return;\n\n      const items = await this.parseFile(filePath);\n\n      if (items.length > 0) {\n        this.fileMap.set(filePath, items);\n        this.cache.set(filePath, {\n          mtime: stats.mtimeMs,\n          size: stats.size,\n          items: items\n        });\n      } else {\n        this.fileMap.delete(filePath);\n        this.cache.delete(filePath);\n      }\n\n      const activeEditor = vscode.window.activeTextEditor;\n      if (activeEditor && activeEditor.document.uri.fsPath === filePath) {\n        this.applyHighlights(activeEditor);\n      }\n\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        this.handleFileDelete(filePath);\n      }\n      throw error;\n    }\n  }\n\n  async parseFile(filePath) {\n    return new Promise((resolve, reject) => {\n      const items = [];\n      const stream = createReadStream(filePath, { encoding: 'utf8' });\n      const rl = readline.createInterface({\n        input: stream,\n        crlfDelay: Infinity\n      });\n\n      let lineNumber = 0;\n\n      rl.on('line', (line) => {\n        const regex = new RegExp(TAG_PATTERN, 'g');\n        let match;\n\n        while ((match = regex.exec(line)) !== null) {\n          const tag = match[1].toUpperCase();\n          const text = match[2].trim();\n\n          if (TAGS.includes(tag)) {\n            items.push({\n              tag,\n              text,\n              line: lineNumber,\n              column: match.index,\n              file: filePath\n            });\n          }\n        }\n        lineNumber++;\n      });\n\n      rl.on('close', () => resolve(items));\n      rl.on('error', reject);\n    });\n  }\n\n  setupWatchers() {\n    const watcher = vscode.workspace.createFileSystemWatcher('**/*');\n\n    this.context.subscriptions.push(\n      watcher,\n      watcher.onDidChange(uri => this.handleFileChange(uri.fsPath)),\n      watcher.onDidCreate(uri => this.handleFileChange(uri.fsPath)),\n      watcher.onDidDelete(uri => this.handleFileDelete(uri.fsPath)),\n\n      vscode.window.onDidChangeActiveTextEditor(editor => {\n        if (editor) {\n          this.applyHighlights(editor);\n        }\n      }),\n\n      vscode.workspace.onDidChangeTextDocument(event => {\n        this.handleDocumentChange(event.document);\n      }),\n\n      vscode.workspace.onDidSaveTextDocument(document => {\n        this.handleDocumentSave(document);\n      })\n    );\n  }\n\n  handleFileChange(filePath) {\n    if (this.shouldProcessFile(filePath)) {\n      this.debounceFileUpdate(filePath);\n    }\n  }\n\n  debounceFileUpdate(filePath) {\n    clearTimeout(this.updateTimers.get(filePath));\n\n    this.updateTimers.set(filePath, setTimeout(async () => {\n      try {\n        await this.processFile(filePath);\n        this.refresh();\n        await this.saveCache();\n      } catch (error) {\n        console.error(`Error updating ${filePath}:`, error);\n      }\n    }, 1000)); // Larger debounce for file changes\n  }\n\n  handleFileDelete(filePath) {\n    this.fileMap.delete(filePath);\n    this.cache.delete(filePath);\n    this.refresh();\n  }\n\n  shouldProcessFile(filePath) {\n    const ignoredExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.woff', '.woff2', '.ttf', '.eot'];\n    const ignoredFiles = [/\\.min\\.(js|css)$/, /\\.map$/, /package-lock\\.json$/, /yarn\\.lock$/];\n\n    const ext = path.extname(filePath).toLowerCase();\n    if (ignoredExtensions.includes(ext)) return false;\n\n    return !ignoredFiles.some(pattern => pattern.test(filePath));\n  }\n\n  handleDocumentChange(document) {\n    if (!this.shouldProcessFile(document.uri.fsPath)) return;\n\n    // Use debounce for real-time document changes\n    clearTimeout(this.documentChangeTimer);\n    this.documentChangeTimer = setTimeout(() => {\n      this.processDocumentInMemory(document);\n    }, 300); // Faster debounce for real-time changes\n  }\n\n  handleDocumentSave(document) {\n    if (!this.shouldProcessFile(document.uri.fsPath)) return;\n\n    // Process immediately on save\n    this.processDocumentFromFile(document.uri.fsPath);\n  }\n\n  async processDocumentInMemory(document) {\n    try {\n      const filePath = document.uri.fsPath;\n      const content = document.getText();\n\n      // Parse content in memory (not saved yet)\n      const items = this.parseContent(content, filePath);\n\n      if (items.length > 0) {\n        this.fileMap.set(filePath, items);\n        // Don't update cache yet, only visualization\n      } else {\n        this.fileMap.delete(filePath);\n      }\n\n      // Apply highlights immediately\n      const activeEditor = vscode.window.activeTextEditor;\n      if (activeEditor && activeEditor.document === document) {\n        this.applyHighlights(activeEditor);\n      }\n\n      // Update the tree\n      this.refresh();\n\n    } catch (error) {\n      console.error(`Error processing document in memory:`, error);\n    }\n  }\n\n  async processDocumentFromFile(filePath) {\n    try {\n      await this.processFile(filePath);\n      this.refresh();\n      await this.saveCache();\n    } catch (error) {\n      console.error(`Error processing document from file:`, error);\n    }\n  }\n\n  parseContent(content, filePath) {\n    const items = [];\n    const lines = content.split('\\n');\n\n    lines.forEach((line, lineNumber) => {\n      const regex = new RegExp(TAG_PATTERN, 'g');\n      let match;\n\n      while ((match = regex.exec(line)) !== null) {\n        const tag = match[1].toUpperCase();\n        const text = match[2].trim();\n\n        if (TAGS.includes(tag)) {\n          items.push({\n            tag,\n            text,\n            line: lineNumber,\n            column: match.index,\n            file: filePath\n          });\n        }\n      }\n    });\n\n    return items;\n  }\n\n  applyHighlightsToActiveEditor() {\n    const activeEditor = vscode.window.activeTextEditor;\n    if (activeEditor) {\n      this.applyHighlights(activeEditor);\n    }\n  }\n\n  applyHighlights(editor) {\n    if (!editor) return;\n\n    const filePath = editor.document.uri.fsPath;\n    const items = this.fileMap.get(filePath) || [];\n\n    const oldDecorations = this.decorations.get(filePath) || [];\n    oldDecorations.forEach(decoration => decoration.dispose());\n\n    const ranges = items.map(item => new vscode.Range(\n      new vscode.Position(item.line, item.column),\n      new vscode.Position(item.line, item.column + item.tag.length)\n    ));\n\n    editor.setDecorations(this.decorationType, ranges);\n  }\n\n  refresh() {\n    this._onDidChangeTreeData.fire();\n  }\n\n  async saveCache() {\n    try {\n      const cacheData = Object.fromEntries(this.cache);\n      await this.context.globalState.update(`todoCache_v${CACHE_VERSION}`, cacheData);\n    } catch (error) {\n      console.error('Cache save error:', error);\n    }\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n\n  async getChildren(element) {\n    if (element) {\n      return element.children || [];\n    }\n    return this.buildTree();\n  }\n\n  buildTree() {\n    const tree = [];\n    const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n    if (!workspaceRoot) return tree;\n\n    const folderStructure = new Map();\n\n    this.fileMap.forEach((items, filePath) => {\n      if (!filePath.startsWith(workspaceRoot)) return;\n\n      const relativePath = path.relative(workspaceRoot, filePath);\n      const pathParts = relativePath.split(path.sep);\n      const fileName = pathParts.pop();\n\n      let currentLevel = folderStructure;\n      let currentPath = workspaceRoot;\n\n      pathParts.forEach(part => {\n        currentPath = path.join(currentPath, part);\n        if (!currentLevel.has(part)) {\n          currentLevel.set(part, {\n            type: 'folder',\n            path: currentPath,\n            children: new Map(),\n            files: new Map()\n          });\n        }\n        currentLevel = currentLevel.get(part).children;\n      });\n\n      if (!currentLevel.has('__files__')) {\n        currentLevel.set('__files__', new Map());\n      }\n      currentLevel.get('__files__').set(fileName, { filePath, items });\n    });\n\n    return this.buildTreeFromStructure(folderStructure, workspaceRoot);\n  }\n\n  buildTreeFromStructure(structure, basePath) {\n    const nodes = [];\n\n    structure.forEach((value, key) => {\n      if (key === '__files__') {\n        value.forEach((fileData, fileName) => {\n          const fileNode = {\n            label: fileName,\n            tooltip: path.relative(vscode.workspace.workspaceFolders[0].uri.fsPath, fileData.filePath),\n            collapsibleState: vscode.TreeItemCollapsibleState.Collapsed,\n            iconPath: vscode.ThemeIcon.File,\n            children: []\n          };\n\n          fileData.items.forEach(item => {\n            fileNode.children.push({\n              label: `[${item.tag}] ${item.text}`,\n              description: `Line ${item.line + 1}`,\n              command: {\n                command: \"vscode.open\",\n                title: \"Open File\",\n                arguments: [\n                  vscode.Uri.file(fileData.filePath),\n                  { selection: new vscode.Range(item.line, 0, item.line, 0) }\n                ]\n              },\n              iconPath: this.getIconForTag(item.tag)\n            });\n          });\n\n          if (fileNode.children.length > 0) {\n            nodes.push(fileNode);\n          }\n        });\n      } else {\n        const folderNode = {\n          label: key,\n          tooltip: path.relative(vscode.workspace.workspaceFolders[0].uri.fsPath, value.path),\n          collapsibleState: vscode.TreeItemCollapsibleState.Collapsed,\n          iconPath: vscode.ThemeIcon.Folder,\n          children: this.buildTreeFromStructure(value.children, value.path)\n        };\n\n        if (folderNode.children.length > 0) {\n          nodes.push(folderNode);\n        }\n      }\n    });\n\n    return nodes.sort((a, b) => {\n      if (a.iconPath.id === 'folder' && b.iconPath.id !== 'folder') return -1;\n      if (a.iconPath.id !== 'folder' && b.iconPath.id === 'folder') return 1;\n      return a.label.localeCompare(b.label);\n    });\n  }\n\n  getIconForTag(tag) {\n    const iconMap = {\n      'TODO': new vscode.ThemeIcon('checklist'),\n      'FIXME': new vscode.ThemeIcon('tools'),\n      'BUG': new vscode.ThemeIcon('bug'),\n      'HACK': new vscode.ThemeIcon('warning'),\n      'XXX': new vscode.ThemeIcon('alert')\n    };\n    return iconMap[tag] || new vscode.ThemeIcon('comment');\n  }\n}\n\nfunction activate(context) {\n  const provider = new TodoTreeProvider(context);\n\n  context.subscriptions.push(\n    vscode.window.registerTreeDataProvider(\"todoTreeView\", provider),\n    vscode.commands.registerCommand(\"codeTODO.refresh\", async () => {\n      provider.fileMap.clear();\n      provider.cache.clear();\n      await provider.startScan();\n    })\n  );\n\n  return provider;\n}\n\nfunction deactivate() { }\n\nmodule.exports = { activate, deactivate };\n","module.exports = require(\"readline\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["module","exports","require","vscode","path","fs","createReadStream","readline","TAGS","TAG_PATTERN","join","TodoTreeProvider","constructor","context","this","cache","Map","fileMap","decorations","isScanning","documentChangeTimer","updateTimers","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","decorationType","window","createTextEditorDecorationType","backgroundColor","color","border","borderRadius","overviewRulerColor","overviewRulerLane","OverviewRulerLane","Right","initialize","loadCacheSync","size","refresh","applyHighlightsToActiveEditor","setupWatchers","setTimeout","startScan","cacheData","globalState","get","Object","entries","forEach","filePath","entry","items","Array","isArray","length","set","error","console","uris","workspace","findFiles","filesToProcess","uri","fsPath","stats","stat","cacheEntry","mtime","mtimeMs","push","handleFileDelete","processFilesInBatches","saveCache","files","processed","i","batch","slice","Promise","all","map","async","processFile","resolve","parseFile","delete","activeEditor","activeTextEditor","document","applyHighlights","code","reject","stream","encoding","rl","createInterface","input","crlfDelay","Infinity","lineNumber","on","line","regex","RegExp","match","exec","tag","toUpperCase","text","trim","includes","column","index","file","watcher","createFileSystemWatcher","subscriptions","onDidChange","handleFileChange","onDidCreate","onDidDelete","onDidChangeActiveTextEditor","editor","onDidChangeTextDocument","handleDocumentChange","onDidSaveTextDocument","handleDocumentSave","shouldProcessFile","debounceFileUpdate","clearTimeout","ext","extname","toLowerCase","some","pattern","test","processDocumentInMemory","processDocumentFromFile","content","getText","parseContent","split","decoration","dispose","ranges","item","Range","Position","setDecorations","fire","fromEntries","update","getTreeItem","element","getChildren","children","buildTree","workspaceRoot","workspaceFolders","folderStructure","startsWith","pathParts","relative","sep","fileName","pop","currentLevel","currentPath","part","has","type","buildTreeFromStructure","structure","basePath","nodes","value","key","fileData","fileNode","label","tooltip","collapsibleState","TreeItemCollapsibleState","Collapsed","iconPath","ThemeIcon","File","description","command","title","arguments","Uri","selection","getIconForTag","folderNode","Folder","sort","a","b","id","localeCompare","activate","provider","registerTreeDataProvider","commands","registerCommand","clear","deactivate","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}