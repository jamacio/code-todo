{"version":3,"file":"extension.js","mappings":"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","sources":["../external commonjs \"vscode\"",".././src/extension.js","../external node-commonjs \"readline\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["module.exports = require(\"vscode\");","// © 2025 Jamácio Rocha - Licensed under Non-Commercial OSS\nconst vscode = require('vscode');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst { createReadStream } = require('fs');\nconst readline = require('readline');\n\nconst TAGS = ['BUG', 'HACK', 'FIXME', 'TODO', 'XXX'];\nconst TAG_PATTERN = `\\\\b(${TAGS.join('|')})(?=\\\\s|:)[:]?\\\\s*(.*)`;\nconst CACHE_VERSION = 36;\nconst MAX_CONCURRENT_FILES = 100;\nconst DEBOUNCE_TIME = 25;\nconst BATCH_DISPLAY_SIZE = 5;\n\nclass UltimateTodoProvider {\n  constructor(context) {\n    this.context = context;\n    this.cache = new Map();\n    this.fileMap = new Map();\n    this.activeOperations = new Set();\n    this.processingQueue = new Set();\n    this.debounceTimer = null;\n    this.isInitialized = false;\n    this.initialScanComplete = false;\n    this.accumulatedTodos = 0;\n\n    this.decorationType = vscode.window.createTextEditorDecorationType({\n      overviewRulerColor: new vscode.ThemeColor('editorOverviewRuler.addedForeground'),\n      backgroundColor: 'rgba(255, 255, 255, 0.68)',\n      color: 'rgba(0, 0, 0, 0.68)',\n      border: '1px solid rgba(255, 255, 255, 0.68)',\n      borderRadius: '3px',\n      overviewRulerLane: vscode.OverviewRulerLane.Right,\n    });\n\n    this._onDidChange = new vscode.EventEmitter();\n    this.onDidChangeTreeData = this._onDidChange.event;\n\n    this.initialize().catch(error =>\n      vscode.window.showErrorMessage(`Initialization error: ${error.message}`)\n    );\n  }\n\n  async initialize() {\n    await this.loadCache();\n    this.setupWatchers();\n    await this.startBackgroundProcessing();\n  }\n\n  refresh() {\n    this._onDidChange.fire();\n  }\n\n  async startBackgroundProcessing() {\n    try {\n      const uris = await vscode.workspace.findFiles(\n        '**/*.{js,ts,jsx,tsx,php,py,java,cs,cpp,h,html,css,md,json}',\n        '**/{node_modules,vendor,dist,out,build,.git}/**'\n      );\n\n      this.updateFileList(uris);\n      this.isInitialized = true;\n\n      if (!this.initialScanComplete) {\n        await this.processFullDiscovery();\n        this.initialScanComplete = true;\n        await this.saveCache();\n      }\n    } catch (error) {\n      vscode.window.showErrorMessage(`Background processing failed: ${error.message}`);\n    }\n  }\n\n  async processFullDiscovery() {\n    const files = Array.from(this.processingQueue);\n    this.processingQueue.clear();\n\n    while (files.length > 0) {\n      const batch = files.splice(0, MAX_CONCURRENT_FILES);\n      const results = await Promise.all(batch.map(filePath =>\n        this.processSingleFile(filePath).catch(() => 0)\n      ));\n\n      const newTodos = results.reduce((sum, count) => sum + count, 0);\n      this.accumulatedTodos += newTodos;\n\n      while (this.accumulatedTodos >= BATCH_DISPLAY_SIZE) {\n        this.refresh();\n        this.accumulatedTodos -= BATCH_DISPLAY_SIZE;\n      }\n    }\n\n    if (this.accumulatedTodos > 0) {\n      this.refresh();\n    }\n  }\n\n  updateFileList(uris) {\n    const currentFiles = new Set(uris.map(uri => uri.fsPath));\n\n    Array.from(this.cache.keys()).forEach(filePath => {\n      if (!currentFiles.has(filePath)) {\n        this.handleFileDelete(vscode.Uri.file(filePath));\n      }\n    });\n\n    uris.forEach(uri => {\n      if (!this.cache.has(uri.fsPath)) {\n        this.processingQueue.add(uri.fsPath);\n      }\n    });\n  }\n\n  setupWatchers() {\n    const watcher = vscode.workspace.createFileSystemWatcher('**/*');\n\n    this.context.subscriptions.push(\n      watcher,\n      watcher.onDidChange(uri => this.queueFileUpdate(uri.fsPath)),\n      watcher.onDidCreate(uri => this.queueFileUpdate(uri.fsPath)),\n      watcher.onDidDelete(uri => this.handleFileDelete(uri)),\n      vscode.window.onDidChangeActiveTextEditor(editor =>\n        this.applyHighlights(editor)\n      )\n    );\n  }\n\n  handleFileDelete(uri) {\n    const filePath = uri.fsPath;\n    this.fileMap.delete(filePath);\n    this.cache.delete(filePath);\n    this.updateView(true);\n  }\n\n  queueFileUpdate(filePath) {\n    if (!this.initialScanComplete || this.processingQueue.has(filePath)) return;\n    this.processingQueue.add(filePath);\n    this.debounceProcess();\n  }\n\n  debounceProcess() {\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => this.processIncrementalUpdates(), DEBOUNCE_TIME);\n  }\n\n  async processIncrementalUpdates() {\n    while (this.processingQueue.size > 0) {\n      const batch = Array.from(this.processingQueue)\n        .slice(0, MAX_CONCURRENT_FILES);\n\n      this.processingQueue = new Set(\n        Array.from(this.processingQueue)\n          .slice(MAX_CONCURRENT_FILES)\n      );\n\n      await Promise.all(batch.map(filePath =>\n        this.processSingleFile(filePath)\n          .catch(error => console.error(`Error processing ${filePath}:`, error))\n      ));\n\n      this.updateView(true);\n    }\n  }\n\n  async processSingleFile(filePath) {\n    if (this.activeOperations.has(filePath)) return 0;\n    this.activeOperations.add(filePath);\n\n    try {\n      const stats = await fs.stat(filePath);\n      const cacheEntry = this.cache.get(filePath);\n\n      if (cacheEntry?.mtime === stats.mtimeMs) return 0;\n\n      const items = await this.parseFileStream(filePath);\n      const count = items.length;\n      this.updateFileData(filePath, items, stats.mtimeMs);\n      this.applyHighlightsForFile(filePath);\n      return count;\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        this.handleFileDelete(vscode.Uri.file(filePath));\n        return 0;\n      }\n      console.error(`Error processing ${filePath}:`, error);\n      return 0;\n    } finally {\n      this.activeOperations.delete(filePath);\n    }\n  }\n\n  applyHighlightsForFile(filePath) {\n    vscode.window.visibleTextEditors.forEach(editor => {\n      if (editor.document.uri.fsPath === filePath) {\n        this.applyHighlights(editor);\n      }\n    });\n  }\n\n  updateFileData(filePath, newItems, mtime) {\n    const itemsMap = new Map(newItems.map(item =>\n      [`${item.line}:${item.position}`, item]\n    ));\n    const mergedItems = Array.from(itemsMap.values());\n\n    if (mergedItems.length > 0) {\n      this.fileMap.set(filePath, mergedItems);\n      this.cache.set(filePath, { mtime, items: mergedItems });\n    } else {\n      this.fileMap.delete(filePath);\n      this.cache.delete(filePath);\n    }\n  }\n\n  async parseFileStream(filePath) {\n    return new Promise((resolve, reject) => {\n      const items = [];\n      const rl = readline.createInterface({\n        input: createReadStream(filePath, 'utf8'),\n        crlfDelay: Infinity\n      });\n\n      let lineNumber = 0;\n\n      rl.on('line', (line) => {\n        const matches = [...line.matchAll(new RegExp(TAG_PATTERN, 'g'))];\n\n        for (const match of matches) {\n          const [_, tag, comment] = match;\n          if (TAGS.includes(tag.toUpperCase())) {\n            items.push({\n              tag: tag.toUpperCase(),\n              text: comment.trim(),\n              line: lineNumber,\n              position: match.index,\n              file: filePath\n            });\n          }\n        }\n        lineNumber++;\n      });\n\n      rl.on('close', () => resolve(items));\n      rl.on('error', reject);\n    });\n  }\n\n  async loadCache() {\n    try {\n      const cacheData = await this.context.globalState.get(\n        `todoCache_v${CACHE_VERSION}`,\n        {}\n      );\n\n      Object.entries(cacheData).forEach(([path, entry]) => {\n        if (entry?.items) {\n          this.cache.set(path, entry);\n          this.fileMap.set(path, entry.items);\n        }\n      });\n      this.refresh();\n    } catch (error) {\n      vscode.window.showErrorMessage(`Cache load failed: ${error.message}`);\n    }\n  }\n\n  async saveCache() {\n    try {\n      await this.context.globalState.update(\n        `todoCache_v${CACHE_VERSION}`,\n        Object.fromEntries(this.cache)\n      );\n    } catch (error) {\n      console.error('Cache save error:', error);\n    }\n  }\n\n  updateView(force = false) {\n    this.refresh();\n    if (force && this.initialScanComplete) {\n      this.saveCache();\n    }\n  }\n\n  applyHighlights(editor) {\n    try {\n      if (!editor) return;\n      const uri = editor.document.uri.fsPath;\n      const items = this.fileMap.get(uri) || [];\n\n      const ranges = items\n        .filter(item => TAGS.includes(item.tag))\n        .map(item => new vscode.Range(\n          new vscode.Position(item.line, item.position),\n          new vscode.Position(item.line, item.position + item.tag.length)\n        ));\n\n      editor.setDecorations(this.decorationType, ranges);\n    } catch (error) {\n      console.error('Highlight error:', error);\n    }\n  }\n\n  getTreeItem(element) { return element; }\n\n  async getChildren(element) {\n    return element ? element.children : this.buildTreeStructure();\n  }\n\n  buildTreeStructure() {\n    const tree = [];\n    const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n    if (!workspaceRoot) return tree;\n\n    this.fileMap.forEach((items, filePath) => {\n      if (!filePath.startsWith(workspaceRoot)) return;\n      const relativePath = path.relative(workspaceRoot, filePath);\n      let currentLevel = tree;\n\n      relativePath.split(path.sep).forEach((part, index) => {\n        let node = currentLevel.find(n => n.label === part);\n        if (!node) {\n          node = {\n            label: part,\n            children: [],\n            collapsibleState: vscode.TreeItemCollapsibleState.Collapsed,\n            path: path.join(\n              workspaceRoot,\n              ...relativePath.split(path.sep).slice(0, index + 1)\n            )\n          };\n          currentLevel.push(node);\n        }\n        currentLevel = node.children;\n      });\n\n      items.forEach(item => currentLevel.push({\n        label: `[${item.tag}] ${item.text}`,\n        description: `Line ${item.line + 1}`,\n        command: {\n          command: \"vscode.open\",\n          title: \"Open File\",\n          arguments: [\n            vscode.Uri.file(filePath),\n            { selection: new vscode.Range(item.line, 0, item.line, 0) }\n          ]\n        }\n      }));\n    });\n\n    return tree.sort((a, b) => a.label.localeCompare(b.label));\n  }\n}\n\nfunction activate(context) {\n  const provider = new UltimateTodoProvider(context);\n  context.subscriptions.push(\n    vscode.window.registerTreeDataProvider(\"todoTreeView\", provider),\n    vscode.commands.registerCommand(\"codeTODO.refresh\", () => {\n      provider.cache.clear();\n      provider.fileMap.clear();\n      provider.processingQueue.clear();\n      provider.initialScanComplete = false;\n      provider.startBackgroundProcessing();\n    }),\n    { dispose: () => provider.saveCache() }\n  );\n  return provider;\n}\n\nfunction deactivate() { }\n\nmodule.exports = { activate, deactivate };","module.exports = require(\"readline\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["module","exports","require","vscode","path","fs","createReadStream","readline","TAGS","TAG_PATTERN","join","UltimateTodoProvider","constructor","context","this","cache","Map","fileMap","activeOperations","Set","processingQueue","debounceTimer","isInitialized","initialScanComplete","accumulatedTodos","decorationType","window","createTextEditorDecorationType","overviewRulerColor","ThemeColor","backgroundColor","color","border","borderRadius","overviewRulerLane","OverviewRulerLane","Right","_onDidChange","EventEmitter","onDidChangeTreeData","event","initialize","catch","error","showErrorMessage","message","loadCache","setupWatchers","startBackgroundProcessing","refresh","fire","uris","workspace","findFiles","updateFileList","processFullDiscovery","saveCache","files","Array","from","clear","length","batch","splice","newTodos","Promise","all","map","filePath","processSingleFile","reduce","sum","count","currentFiles","uri","fsPath","keys","forEach","has","handleFileDelete","Uri","file","add","watcher","createFileSystemWatcher","subscriptions","push","onDidChange","queueFileUpdate","onDidCreate","onDidDelete","onDidChangeActiveTextEditor","editor","applyHighlights","delete","updateView","debounceProcess","clearTimeout","setTimeout","processIncrementalUpdates","size","slice","console","stats","stat","cacheEntry","get","mtime","mtimeMs","items","parseFileStream","updateFileData","applyHighlightsForFile","code","visibleTextEditors","document","newItems","itemsMap","item","line","position","mergedItems","values","set","resolve","reject","rl","createInterface","input","crlfDelay","Infinity","lineNumber","on","matches","matchAll","RegExp","match","_","tag","comment","includes","toUpperCase","text","trim","index","cacheData","globalState","Object","entries","entry","update","fromEntries","force","ranges","filter","Range","Position","setDecorations","getTreeItem","element","getChildren","children","buildTreeStructure","tree","workspaceRoot","workspaceFolders","startsWith","relativePath","relative","currentLevel","split","sep","part","node","find","n","label","collapsibleState","TreeItemCollapsibleState","Collapsed","description","command","title","arguments","selection","sort","a","b","localeCompare","activate","provider","registerTreeDataProvider","commands","registerCommand","dispose","deactivate","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}